# Generated by Django 3.0.3 on 2020-02-24 23:33

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import subgraph.models
import tools.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DocToNode',
            fields=[
                ('ItemId', tools.models.IdField(editable=False, primary_key=True, serialize=False)),
                ('PrimaryLabel', models.TextField(db_index=True, editable=False)),
                ('CreateType', models.TextField(choices=[('AUTO', 'SystemAuto'), ('USER', 'UserMade'), ('OFF', 'Official'), ('REAL', 'RealSource')], default='USER', editable=False)),
                ('CreateUser', models.BigIntegerField(default=1, editable=False)),
                ('CreateTime', models.DateField(auto_now_add=True)),
                ('UpdateTime', models.DateField(auto_now=True)),
                ('PropsWarning', django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ('IsUsed', models.BooleanField(default=True)),
                ('ItemType', tools.models.TypeField(default='link')),
                ('StartId', tools.models.IdField(db_index=True)),
                ('EndId', tools.models.IdField(db_index=True)),
                ('StartType', tools.models.TypeField()),
                ('EndType', tools.models.TypeField()),
                ('StartPLabel', models.TextField()),
                ('EndPLabel', models.TextField()),
                ('IsMain', models.BooleanField(db_column='Main', default=False)),
                ('Correlation', tools.models.LevelField(db_column='Correlation', default=-1, validators=[django.core.validators.MinValueValidator(limit_value=-1), django.core.validators.MaxValueValidator(limit_value=100)])),
                ('DocumentImp', tools.models.LevelField(db_column='DocImp', default=-1, validators=[django.core.validators.MinValueValidator(limit_value=-1), django.core.validators.MaxValueValidator(limit_value=100)])),
            ],
            options={
                'db_table': 'item_link_ctrl_doc_to_node',
            },
        ),
        migrations.CreateModel(
            name='FragmentCtrl',
            fields=[
                ('ItemId', tools.models.IdField(editable=False, primary_key=True, serialize=False)),
                ('ItemType', models.TextField(db_index=True, editable=False)),
                ('PrimaryLabel', models.TextField(db_index=True, editable=False)),
                ('CreateType', models.TextField(choices=[('AUTO', 'SystemAuto'), ('USER', 'UserMade'), ('OFF', 'Official'), ('REAL', 'RealSource')], default='USER', editable=False)),
                ('CreateUser', models.BigIntegerField(default=1, editable=False)),
                ('CreateTime', models.DateField(auto_now_add=True)),
                ('UpdateTime', models.DateField(auto_now=True)),
                ('PropsWarning', django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ('IsUsed', models.BooleanField(default=True)),
                ('SourceId', tools.models.IdField(db_index=True)),
                ('SourceType', tools.models.TypeField(db_index=True)),
                ('SourceLabel', models.TextField()),
                ('IsLinked', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'item_fragment_ctrl',
            },
        ),
        migrations.CreateModel(
            name='FragmentInfo',
            fields=[
                ('ItemId', tools.models.IdField(editable=False, primary_key=True, serialize=False)),
                ('PrimaryLabel', models.TextField(db_column='Plabel', db_index=True, editable=False)),
                ('Name', tools.models.NameField(db_column='Name')),
                ('Labels', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), db_column='Labels', db_index=True, default=list, size=None)),
                ('Description', tools.models.TranslateField(default=tools.models.default_text)),
                ('ExtraProps', django.contrib.postgres.fields.jsonb.JSONField(db_column='ExtraProps', default=dict)),
                ('StandardProps', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('ItemType', tools.models.TypeField(default='fragment')),
                ('Src', models.URLField(default='')),
            ],
            options={
                'db_table': 'item_fragment_info',
            },
        ),
        migrations.CreateModel(
            name='FrequencyCount',
            fields=[
                ('ItemId', tools.models.IdField(editable=False, primary_key=True, serialize=False)),
                ('PrimaryLabel', models.TextField(db_index=True, editable=False)),
                ('CreateType', models.TextField(choices=[('AUTO', 'SystemAuto'), ('USER', 'UserMade'), ('OFF', 'Official'), ('REAL', 'RealSource')], default='USER', editable=False)),
                ('CreateUser', models.BigIntegerField(default=1, editable=False)),
                ('CreateTime', models.DateField(auto_now_add=True)),
                ('UpdateTime', models.DateField(auto_now=True)),
                ('PropsWarning', django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ('IsUsed', models.BooleanField(default=True)),
                ('ItemType', tools.models.TypeField(default='link')),
                ('StartId', tools.models.IdField(db_index=True)),
                ('EndId', tools.models.IdField(db_index=True)),
                ('StartType', tools.models.TypeField()),
                ('EndType', tools.models.TypeField()),
                ('StartPLabel', models.TextField()),
                ('EndPLabel', models.TextField()),
                ('Count', models.IntegerField(db_column='Count', default=1)),
                ('Frequency', models.FloatField(db_column='Frequency', default=0)),
            ],
            options={
                'db_table': 'item_link_ctrl_frequency',
            },
        ),
        migrations.CreateModel(
            name='KnowLedge',
            fields=[
                ('ItemId', tools.models.IdField(editable=False, primary_key=True, serialize=False)),
                ('PrimaryLabel', models.TextField(db_index=True, editable=False)),
                ('CreateType', models.TextField(choices=[('AUTO', 'SystemAuto'), ('USER', 'UserMade'), ('OFF', 'Official'), ('REAL', 'RealSource')], default='USER', editable=False)),
                ('CreateUser', models.BigIntegerField(default=1, editable=False)),
                ('CreateTime', models.DateField(auto_now_add=True)),
                ('UpdateTime', models.DateField(auto_now=True)),
                ('PropsWarning', django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ('IsUsed', models.BooleanField(default=True)),
                ('IsCommon', models.BooleanField(db_index=True, default=True)),
                ('IsShared', models.BooleanField(db_index=True, default=False)),
                ('IsOpenSource', models.BooleanField(db_index=True, default=False)),
                ('Hot', tools.models.HotField(default=100, validators=[django.core.validators.MinValueValidator(limit_value=1)])),
                ('Labels', models.TextField(default=list)),
                ('NumStar', models.IntegerField(default=0)),
                ('NumShared', models.IntegerField(default=0)),
                ('NumGood', models.IntegerField(default=0)),
                ('NumBad', models.IntegerField(default=0)),
                ('ItemType', tools.models.TypeField(default='link')),
                ('StartId', tools.models.IdField(db_index=True)),
                ('EndId', tools.models.IdField(db_index=True)),
                ('StartType', tools.models.TypeField()),
                ('EndType', tools.models.TypeField()),
                ('StartPLabel', models.TextField()),
                ('EndPLabel', models.TextField()),
                ('Confidence', models.SmallIntegerField(db_column='Confidence', default=50)),
                ('SelectTimes', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'item_link_ctrl_knowledge',
            },
        ),
        migrations.CreateModel(
            name='MediaCtrl',
            fields=[
                ('ItemId', tools.models.IdField(editable=False, primary_key=True, serialize=False)),
                ('PrimaryLabel', models.TextField(db_index=True, editable=False)),
                ('CreateType', models.TextField(choices=[('AUTO', 'SystemAuto'), ('USER', 'UserMade'), ('OFF', 'Official'), ('REAL', 'RealSource')], default='USER', editable=False)),
                ('CreateUser', models.BigIntegerField(default=1, editable=False)),
                ('CreateTime', models.DateField(auto_now_add=True)),
                ('UpdateTime', models.DateField(auto_now=True)),
                ('PropsWarning', django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ('IsUsed', models.BooleanField(default=True)),
                ('IsCommon', models.BooleanField(db_index=True, default=True)),
                ('IsShared', models.BooleanField(db_index=True, default=False)),
                ('IsOpenSource', models.BooleanField(db_index=True, default=False)),
                ('Hot', tools.models.HotField(default=100, validators=[django.core.validators.MinValueValidator(limit_value=1)])),
                ('Labels', models.TextField(default=list)),
                ('NumStar', models.IntegerField(default=0)),
                ('NumShared', models.IntegerField(default=0)),
                ('NumGood', models.IntegerField(default=0)),
                ('NumBad', models.IntegerField(default=0)),
                ('ItemType', tools.models.TypeField(default='media')),
                ('FileName', models.TextField()),
                ('Format', models.TextField(db_column='Format', db_index=True)),
                ('Thumb', models.TextField(default='')),
                ('CountCacheTime', models.DateTimeField(db_column='CountCacheTime', default=django.utils.timezone.now)),
                ('TotalTime', models.IntegerField(db_column='TotalTime', default=10)),
            ],
            options={
                'db_table': 'item_media_ctrl',
            },
        ),
        migrations.CreateModel(
            name='MediaInfo',
            fields=[
                ('ItemId', tools.models.IdField(editable=False, primary_key=True, serialize=False)),
                ('PrimaryLabel', models.TextField(db_column='Plabel', db_index=True, editable=False)),
                ('Name', tools.models.NameField(db_column='Name')),
                ('Labels', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), db_column='Labels', db_index=True, default=list, size=None)),
                ('Description', tools.models.TranslateField(default=tools.models.default_text)),
                ('ExtraProps', django.contrib.postgres.fields.jsonb.JSONField(db_column='ExtraProps', default=dict)),
                ('StandardProps', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('ItemType', tools.models.TypeField(default='media')),
            ],
            options={
                'db_table': 'item_media_info',
            },
        ),
        migrations.CreateModel(
            name='NodeCtrl',
            fields=[
                ('ItemId', tools.models.IdField(editable=False, primary_key=True, serialize=False)),
                ('ItemType', models.TextField(db_index=True, editable=False)),
                ('PrimaryLabel', models.TextField(db_index=True, editable=False)),
                ('CreateType', models.TextField(choices=[('AUTO', 'SystemAuto'), ('USER', 'UserMade'), ('OFF', 'Official'), ('REAL', 'RealSource')], default='USER', editable=False)),
                ('CreateUser', models.BigIntegerField(default=1, editable=False)),
                ('CreateTime', models.DateField(auto_now_add=True)),
                ('UpdateTime', models.DateField(auto_now=True)),
                ('PropsWarning', django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ('IsUsed', models.BooleanField(default=True)),
                ('IsCommon', models.BooleanField(db_index=True, default=True)),
                ('IsShared', models.BooleanField(db_index=True, default=False)),
                ('IsOpenSource', models.BooleanField(db_index=True, default=False)),
                ('Labels', models.TextField(default=list)),
                ('NumStar', models.IntegerField(default=0)),
                ('NumShared', models.IntegerField(default=0)),
                ('NumGood', models.IntegerField(default=0)),
                ('NumBad', models.IntegerField(default=0)),
                ('CountCacheTime', models.DateTimeField(db_column='CacheTime', default=django.utils.timezone.now)),
                ('Imp', tools.models.LevelField(default=-1, validators=[django.core.validators.MinValueValidator(limit_value=-1), django.core.validators.MaxValueValidator(limit_value=100)])),
                ('HardLevel', tools.models.LevelField(default=-1, validators=[django.core.validators.MinValueValidator(limit_value=-1), django.core.validators.MaxValueValidator(limit_value=100)])),
                ('Useful', tools.models.LevelField(default=-1, validators=[django.core.validators.MinValueValidator(limit_value=-1), django.core.validators.MaxValueValidator(limit_value=100)])),
                ('Hot', tools.models.HotField(default=100, validators=[django.core.validators.MinValueValidator(limit_value=1)])),
                ('Contributor', django.contrib.postgres.fields.ArrayField(base_field=tools.models.IdField(), default=list, size=None)),
                ('Structure', tools.models.LevelField(default=-1, validators=[django.core.validators.MinValueValidator(limit_value=-1), django.core.validators.MaxValueValidator(limit_value=100)])),
                ('FeatureVec', django.contrib.postgres.fields.jsonb.JSONField(default=subgraph.models.feature_vector)),
                ('TotalTime', models.IntegerField(db_column='TotalTime', default=50)),
            ],
            options={
                'db_table': 'item_node_ctrl',
            },
        ),
        migrations.CreateModel(
            name='NodeInfo',
            fields=[
                ('ItemId', tools.models.IdField(editable=False, primary_key=True, serialize=False)),
                ('ItemType', tools.models.TypeField(db_index=True, default='node', editable=False)),
                ('PrimaryLabel', models.TextField(db_column='Plabel', db_index=True, editable=False)),
                ('Name', tools.models.NameField(db_column='Name')),
                ('Labels', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), db_column='Labels', db_index=True, default=list, size=None)),
                ('Description', tools.models.TranslateField(default=tools.models.default_text)),
                ('ExtraProps', django.contrib.postgres.fields.jsonb.JSONField(db_column='ExtraProps', default=dict)),
                ('StandardProps', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('Alias', django.contrib.postgres.fields.ArrayField(base_field=tools.models.NameField(), db_column='Alias', default=list, size=None)),
                ('Topic', tools.models.TopicField(base_field=models.TextField(), db_index=True, default=list, size=None)),
                ('BaseImp', tools.models.LevelField(default=-1, validators=[django.core.validators.MinValueValidator(limit_value=-1), django.core.validators.MaxValueValidator(limit_value=100)])),
                ('BaseHardLevel', tools.models.LevelField(default=-1, validators=[django.core.validators.MinValueValidator(limit_value=-1), django.core.validators.MaxValueValidator(limit_value=100)])),
                ('BaseUseful', tools.models.LevelField(default=-1, validators=[django.core.validators.MinValueValidator(limit_value=-1), django.core.validators.MaxValueValidator(limit_value=100)])),
                ('Language', models.TextField(db_column='Language', default='auto')),
                ('Translate', tools.models.TranslateField(default=tools.models.default_text)),
                ('MainPic', models.TextField(default='')),
                ('IncludedMedia', django.contrib.postgres.fields.ArrayField(base_field=tools.models.IdField(), db_column='IncludedMedia', default=list, size=None)),
            ],
            options={
                'db_table': 'item_node_info',
            },
        ),
        migrations.CreateModel(
            name='RelationshipInfo',
            fields=[
                ('ItemId', tools.models.IdField(editable=False, primary_key=True, serialize=False)),
                ('ItemType', tools.models.TypeField(db_index=True, default='node', editable=False)),
                ('PrimaryLabel', models.TextField(db_column='Plabel', db_index=True, editable=False)),
                ('Name', tools.models.NameField(db_column='Name')),
                ('Labels', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), db_column='Labels', db_index=True, default=list, size=None)),
                ('Description', tools.models.TranslateField(default=tools.models.default_text)),
                ('ExtraProps', django.contrib.postgres.fields.jsonb.JSONField(db_column='ExtraProps', default=dict)),
                ('StandardProps', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
            ],
            options={
                'db_table': 'item_link_info',
            },
        ),
        migrations.CreateModel(
            name='DocumentCtrl',
            fields=[
                ('nodectrl_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='subgraph.NodeCtrl')),
                ('Complete', tools.models.LevelField(default=-1, validators=[django.core.validators.MinValueValidator(limit_value=-1), django.core.validators.MaxValueValidator(limit_value=100)])),
                ('MainNodes', django.contrib.postgres.fields.ArrayField(base_field=tools.models.IdField(), size=None)),
                ('Size', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'item_document_ctrl',
            },
            bases=('subgraph.nodectrl',),
        ),
    ]
