# Generated by Django 2.2 on 2019-08-03 06:46

import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
import django.contrib.postgres.fields.jsonb
from django.contrib.postgres.operations import HStoreExtension
from django.db import migrations, models
import django.db.models.deletion
import subgraph.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        HStoreExtension(),
        migrations.CreateModel(
            name='AfterVisit',
            fields=[
                ('LinkId', models.BigIntegerField(primary_key=True, serialize=False)),
                ('Start', models.BigIntegerField(db_column='Start', db_index=True)),
                ('End', models.BigIntegerField(db_column='End', db_index=True)),
                ('CreateTime', models.DateTimeField(auto_now_add=True, db_column='CreateTime')),
                ('Type', models.TextField(db_index=True)),
                ('Count', models.IntegerField(db_column='Count', default=1)),
                ('Frequency', models.FloatField(db_column='Frequency', default=0)),
            ],
            options={
                'db_table': 'graph_link_visit_tog',
            },
        ),
        migrations.CreateModel(
            name='Chronology',
            fields=[
                ('FileId', models.BigIntegerField(primary_key=True, serialize=False)),
                ('PeriodStart', models.DateField(db_column='Start', null=True)),
                ('PeriodEnd', models.DateField(db_column='End', null=True)),
                ('Content', models.TextField(db_column='Content')),
            ],
            options={
                'db_table': 'source_chronology',
            },
        ),
        migrations.CreateModel(
            name='Doc2Node',
            fields=[
                ('LinkId', models.BigIntegerField(primary_key=True, serialize=False)),
                ('Start', models.BigIntegerField(db_column='Start', db_index=True)),
                ('End', models.BigIntegerField(db_column='End', db_index=True)),
                ('CreateTime', models.DateTimeField(auto_now_add=True, db_column='CreateTime')),
                ('Type', models.TextField(db_index=True)),
                ('Is_Main', models.BooleanField(db_column='Main', default=False)),
                ('Correlation', models.IntegerField(db_column='Correlation', default=1)),
            ],
            options={
                'db_table': 'graph_link_doc2node',
            },
        ),
        migrations.CreateModel(
            name='KnowLedge',
            fields=[
                ('LinkId', models.BigIntegerField(primary_key=True, serialize=False)),
                ('Start', models.BigIntegerField(db_column='Start', db_index=True)),
                ('End', models.BigIntegerField(db_column='End', db_index=True)),
                ('CreateTime', models.DateTimeField(auto_now_add=True, db_column='CreateTime')),
                ('Type', models.TextField(db_index=True)),
                ('Is_UserMade', models.BooleanField(db_column='Is_UserMade', db_index=True)),
                ('CreateUser', models.BigIntegerField(db_column='CreateUser', db_index=True)),
                ('Confidence', models.SmallIntegerField(db_column='Confidence', default=50)),
                ('Props', django.contrib.postgres.fields.jsonb.JSONField(db_column='Props', default=dict)),
                ('Content', models.TextField(db_column='Content', default='')),
                ('LinkedSource', models.BigIntegerField(db_column='Linked', default=0)),
            ],
            options={
                'db_table': 'graph_link_knowledge',
            },
        ),
        migrations.CreateModel(
            name='LocationDoc',
            fields=[
                ('FileId', models.AutoField(db_column='LocationFile', primary_key=True, serialize=False)),
                ('Name', models.TextField(db_column='Name', default='Beijing')),
                ('LocId', models.TextField(db_column='LocId', db_index=True, default='ChIJ58KMhbNLzJQRwfhoMaMlugA')),
                ('Alias', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), db_column='Alias', db_index=True, default=list, size=None)),
                ('Doc', django.contrib.postgres.fields.jsonb.JSONField(db_column='Content', default=dict)),
            ],
            options={
                'db_table': 'source_location_doc',
            },
        ),
        migrations.CreateModel(
            name='MediaNode',
            fields=[
                ('MediaId', models.BigIntegerField(primary_key=True, serialize=False)),
                ('FileName', models.TextField(db_column='Name')),
                ('Format', models.TextField(db_column='Format')),
                ('MediaType', models.TextField(db_column='Type')),
                ('Url', models.URLField(db_column='URL', default='')),
                ('UploadUser', models.BigIntegerField(db_column='UploadUser')),
                ('UploadTime', models.DateTimeField(auto_now_add=True, db_column='UploadTime')),
                ('Description', models.TextField(db_column='Description', default='None')),
            ],
            options={
                'db_table': 'graph_media_base',
            },
        ),
        migrations.CreateModel(
            name='MentionTogether',
            fields=[
                ('LinkId', models.BigIntegerField(primary_key=True, serialize=False)),
                ('Start', models.BigIntegerField(db_column='Start', db_index=True)),
                ('End', models.BigIntegerField(db_column='End', db_index=True)),
                ('CreateTime', models.DateTimeField(auto_now_add=True, db_column='CreateTime')),
                ('Type', models.TextField(db_index=True)),
                ('Count', models.IntegerField(db_column='Count', default=1)),
                ('Frequency', models.FloatField(db_column='Frequency', default=0)),
            ],
            options={
                'db_table': 'graph_link_mention_tog',
            },
        ),
        migrations.CreateModel(
            name='NodeCtrl',
            fields=[
                ('NodeId', models.BigIntegerField(editable=False, primary_key=True, serialize=False)),
                ('CountCacheTime', models.DateTimeField(db_column='CACHE_TIME')),
                ('Is_UserMade', models.BooleanField(db_column='UserMade', db_index=True)),
                ('CreateTime', models.DateField(auto_now_add=True, db_column='TIME')),
                ('CreateUser', models.BigIntegerField(db_column='USER', default='0', editable=False)),
                ('UpdateTime', models.DateTimeField(auto_now=True, db_column='UpdateTime')),
                ('PrimaryLabel', models.TextField(db_column='P_LABEL', db_index=True)),
                ('Imp', models.IntegerField(db_column='IMP', default=1)),
                ('HardLevel', models.IntegerField(db_column='HARD_LEVEL', default=1)),
                ('Useful', models.IntegerField(db_column='USEFUL', default=1)),
                ('Star', models.IntegerField(db_column='STAR', default=0)),
                ('Contributor', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(), db_column='CONTRIBUTOR', default=subgraph.models.contributor, size=None)),
                ('UserLabels', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), db_column='USER_LABELS', default=list, size=None)),
                ('Hot', models.IntegerField(db_column='Hot', default=1)),
                ('Structure', models.IntegerField(db_column='STR', default=1)),
                ('FeatureVec', django.contrib.postgres.fields.jsonb.JSONField(db_column='FEATURE_VECTOR', default=subgraph.models.feature_vector)),
            ],
            options={
                'db_table': 'graph_node_ctrl',
            },
        ),
        migrations.CreateModel(
            name='NodeInfo',
            fields=[
                ('NodeId', models.BigIntegerField(editable=False, primary_key=True, serialize=False)),
                ('Name', models.TextField(db_column='Name')),
                ('PrimaryLabel', models.TextField(db_column='Plabel', db_index=True)),
                ('MainPic', models.BigIntegerField(db_column='Main')),
                ('Description', models.TextField(db_column='Description')),
                ('IncludedMedia', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), db_column='IncludedMedia', default=list, size=None)),
                ('BaseImp', models.IntegerField(db_column='BaseImp', default=1)),
                ('BaseHardLevel', models.IntegerField(db_column='BaseHardLevel', default=1)),
                ('Alias', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), db_column='Alias', default=list, size=None)),
                ('Language', models.TextField(db_column='Language')),
                ('Topic', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), db_column='Topic', size=None)),
                ('Labels', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), db_column='Labels', db_index=True, default=list, size=None)),
                ('ExtraProps', django.contrib.postgres.fields.jsonb.JSONField(db_column='ExtraProps', default=dict)),
            ],
            options={
                'db_table': 'graph_node_base',
            },
        ),
        migrations.CreateModel(
            name='SearchTogether',
            fields=[
                ('LinkId', models.BigIntegerField(primary_key=True, serialize=False)),
                ('Start', models.BigIntegerField(db_column='Start', db_index=True)),
                ('End', models.BigIntegerField(db_column='End', db_index=True)),
                ('CreateTime', models.DateTimeField(auto_now_add=True, db_column='CreateTime')),
                ('Type', models.TextField(db_index=True)),
                ('Count', models.IntegerField(db_column='Count', default=1)),
                ('Frequency', models.FloatField(db_column='Frequency', default=0)),
            ],
            options={
                'db_table': 'graph_link_search_tog',
            },
        ),
        migrations.CreateModel(
            name='Topic2Node',
            fields=[
                ('LinkId', models.BigIntegerField(primary_key=True, serialize=False)),
                ('Start', models.BigIntegerField(db_column='Start', db_index=True)),
                ('End', models.BigIntegerField(db_column='End', db_index=True)),
                ('CreateTime', models.DateTimeField(auto_now_add=True, db_column='CreateTime')),
                ('Type', models.TextField(db_index=True)),
                ('Is_Main', models.BooleanField(db_column='Main', default=False)),
                ('Correlation', models.IntegerField(db_column='Correlation', default=1)),
                ('TopicImp', models.IntegerField(db_column='TopicImp', default=1)),
            ],
            options={
                'db_table': 'graph_link_topic2node',
            },
        ),
        migrations.CreateModel(
            name='Topic2Topic',
            fields=[
                ('LinkId', models.BigIntegerField(primary_key=True, serialize=False)),
                ('Start', models.BigIntegerField(db_column='Start', db_index=True)),
                ('End', models.BigIntegerField(db_column='End', db_index=True)),
                ('CreateTime', models.DateTimeField(auto_now_add=True, db_column='CreateTime')),
                ('Type', models.TextField(db_index=True)),
                ('Is_Parent', models.BooleanField(db_column='Parent', default=False)),
                ('Correlation', models.IntegerField(db_column='Correlation', default=1)),
                ('CommonSource', models.IntegerField(db_column='CommonSource', default=0)),
            ],
            options={
                'db_table': 'graph_link_topic2topic',
            },
        ),
        migrations.CreateModel(
            name='Translate',
            fields=[
                ('FileId', models.BigIntegerField(primary_key=True, serialize=False)),
                ('Name_auto', models.TextField(db_column='Name', db_index=True, default='')),
                ('Name_zh', models.TextField(db_column='Name_zh', default='')),
                ('Name_en', models.TextField(db_column='Name_en', default='')),
                ('Names', django.contrib.postgres.fields.hstore.HStoreField(db_column='Name_more', default=dict)),
                ('Des_auto', models.TextField(db_column='Description', db_index=True, default='')),
                ('Des_zh', models.TextField(db_column='Description_zh', default='')),
                ('Des_en', models.TextField(db_column='Description_en', default='')),
                ('Descriptions', django.contrib.postgres.fields.hstore.HStoreField(db_column='Description_more', default=dict)),
            ],
            options={
                'db_table': 'source_translate',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('knowledge_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='subgraph.KnowLedge')),
                ('Time', models.TextField(db_column='Time', db_index=True)),
                ('Location', models.TextField(db_column='Location', db_index=True)),
            ],
            options={
                'db_table': 'graph_link_event',
            },
            bases=('subgraph.knowledge',),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('nodeinfo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='subgraph.NodeInfo')),
                ('DateOfBirth', models.TextField(db_column='DateOfBirth')),
                ('DateOfDeath', models.TextField(db_column='DateOfDeath')),
                ('BirthPlace', models.TextField(db_column='BirthPlace', max_length=30)),
                ('Nation', models.TextField(db_column='Nation', max_length=30)),
            ],
            options={
                'db_table': 'graph_node_person',
            },
            bases=('subgraph.nodeinfo',),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('nodeinfo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='subgraph.NodeInfo')),
                ('PeriodStart', models.TextField(db_column='Period_Start')),
                ('PeriodEnd', models.TextField(db_column='Period_End')),
                ('Nation', models.TextField(db_column='Nation', max_length=30)),
                ('Leader', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), db_column='Leader', default=list, size=None)),
            ],
            options={
                'db_table': 'graph_node_project',
            },
            bases=('subgraph.nodeinfo',),
        ),
        migrations.CreateModel(
            name='ArchProject',
            fields=[
                ('project_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='subgraph.Project')),
                ('Location', models.TextField(db_column='Location', default='Beijing')),
                ('WorkTeam', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), db_column='WorkTeam', default=list, size=None)),
                ('Longitude', models.TextField(default='')),
                ('Latitude', models.TextField(default='')),
            ],
            options={
                'db_table': 'graph_node_arch_project',
            },
            bases=('subgraph.project',),
        ),
    ]
