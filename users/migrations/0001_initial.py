# Generated by Django 3.0.3 on 2020-02-24 23:33

import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import tools.models
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GroupCtrl',
            fields=[
                ('GroupId', tools.models.IdField(primary_key=True, serialize=False)),
                ('GroupName', models.TextField(db_column='Group_Name', unique=True)),
                ('CreateUser', models.BigIntegerField(db_column='Create_User')),
                ('Owner', models.BigIntegerField(db_column='Owner')),
                ('Manager', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), db_column='Manager', size=None)),
                ('Member', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), db_column='Member', size=None)),
                ('Topic', tools.models.TopicField(base_field=models.TextField(), db_index=True, default=list, size=None)),
                ('Labels', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, size=None)),
                ('IsAuto', models.BooleanField(db_column='Auto', default=False)),
                ('IsOpen', models.BooleanField(db_column='Open', default=True)),
            ],
            options={
                'db_table': 'user_info_base_group',
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('UserId', tools.models.IdField(db_index=True)),
                ('ItemId', tools.models.IdField(db_index=True)),
                ('CreateTime', models.DateTimeField(auto_now_add=True)),
                ('UpdateTime', models.DateTimeField(auto_now=True)),
                ('IsUsed', models.BooleanField(default=True)),
                ('DocumentId', tools.models.IdField(db_index=True)),
                ('Content', tools.models.SettingField(default=users.models.note_content, validators=[tools.models.setting_check])),
            ],
            options={
                'db_table': 'user_item_note',
            },
        ),
        migrations.CreateModel(
            name='NoteBook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('UserId', tools.models.IdField(db_index=True)),
                ('ItemId', tools.models.IdField(db_index=True)),
                ('CreateTime', models.DateTimeField(auto_now_add=True)),
                ('UpdateTime', models.DateTimeField(auto_now=True)),
                ('IsUsed', models.BooleanField(default=True)),
                ('Name', tools.models.NameField(default='')),
                ('Text', models.TextField(default='')),
                ('Svg', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
            ],
            options={
                'db_table': 'user_item_notebook',
            },
        ),
        migrations.CreateModel(
            name='Privilege',
            fields=[
                ('UserId', tools.models.IdField(primary_key=True, serialize=False)),
                ('IsOwner', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), db_column='Owner', default=list, size=None)),
                ('IsManager', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), db_column='Manager', default=list, size=None)),
                ('IsCollaborator', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), db_column='Coll', default=list, size=None)),
                ('IsSharedTo', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), db_column='ShareTo', default=list, size=None)),
                ('IsFreeTo', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), db_column='FreeTo', default=list, size=None)),
                ('IsPaid', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), db_column='Paid', default=list, size=None)),
            ],
            options={
                'db_table': 'user_authority_count',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('UserId', tools.models.IdField(primary_key=True, serialize=False)),
                ('Name', models.TextField(db_index=True, unique=True)),
                ('UserPw', models.TextField()),
                ('Email', models.TextField(db_index=True, unique=True)),
                ('Phone', models.CharField(max_length=11, unique=True)),
                ('CreateTime', models.DateTimeField(auto_now_add=True)),
                ('Setting', django.contrib.postgres.fields.jsonb.JSONField(default=users.models.user_setting)),
                ('PersonalId', models.BigIntegerField(default=0)),
                ('IsSuperuser', models.BooleanField(default=False)),
                ('IsDeveloper', models.BooleanField(default=False)),
                ('IsPublisher', models.BooleanField(default=False)),
                ('IsVip', models.BooleanField(default=False)),
                ('IsHighVip', models.BooleanField(default=False)),
                ('IsGroup', models.BooleanField(default=False)),
                ('IsActive', models.BooleanField(default=True)),
                ('IsBanned', models.BooleanField(default=False)),
                ('JointGroup', django.contrib.postgres.fields.hstore.HStoreField(default=dict)),
            ],
            options={
                'db_table': 'user_info_base_user',
            },
        ),
        migrations.CreateModel(
            name='UserConcern',
            fields=[
                ('UserId', tools.models.IdField(primary_key=True, serialize=False)),
                ('SourceId', tools.models.IdField(db_index=True)),
                ('SourceType', tools.models.TypeField(db_index=True)),
                ('SourceLabel', models.TextField()),
                ('Labels', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, size=None)),
                ('Imp', tools.models.LevelField(default=-1, validators=[django.core.validators.MinValueValidator(limit_value=-1), django.core.validators.MaxValueValidator(limit_value=100)])),
                ('HardLevel', tools.models.LevelField(default=-1, validators=[django.core.validators.MinValueValidator(limit_value=-1), django.core.validators.MaxValueValidator(limit_value=100)])),
                ('Useful', tools.models.LevelField(default=-1, validators=[django.core.validators.MinValueValidator(limit_value=-1), django.core.validators.MaxValueValidator(limit_value=100)])),
                ('IsStar', models.BooleanField(default=False)),
                ('IsGood', models.BooleanField(default=False)),
                ('IsShared', models.BooleanField(default=False)),
                ('IsBad', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'user_info_concern',
            },
        ),
        migrations.AddIndex(
            model_name='userconcern',
            index=models.Index(fields=['SourceId', 'SourceType'], name='user_info_c_SourceI_60d106_idx'),
        ),
    ]
